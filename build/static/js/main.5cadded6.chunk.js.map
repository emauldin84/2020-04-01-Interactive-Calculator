{"version":3,"sources":["components/ShapeForm.js","components/ShapeDisplay.js","App.js","serviceWorker.js","index.js"],"names":["ShapeForm","props","display","shape","className","htmlFor","name","id","value","onChange","e","console","log","target","setShape","type","color","setColor","height","min","max","step","setHeight","width","setWidth","ShapeDisplay","shapeStyle","background","borderRadius","shapeDisplay","style","App","useState","heigth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5cadded6.chunk.js","sourcesContent":["import React from 'react'\n\nconst ShapeForm = (props) => {\n    const handleSetShape = (e) => {\n        console.log(e.target.value)\n        props.setShape(e.target.value)\n    }\n    const handleSetHeight = (e) => {\n        console.log(e.target.value)\n        props.setHeight(e.target.value)\n    }\n    const handleSetWidth = (e) => {\n        console.log(e.target.value)\n        props.setWidth(e.target.value)\n    }\n    const handleSetColor = (e) => {\n        console.log(e.target.value)\n        props.setColor(e.target.value)\n    }\n    let display = props.shape === 'square' || props.shape === 'circle'\n    return (\n        <div className='shape-form-container'>\n            <div className=\"settings shape-container\">\n                <label htmlFor=\"shape-select\">Shape:</label>\n                <select name=\"shape\" id=\"shape-select\" value={props.shape} onChange={handleSetShape}>\n                    <option value=\"\">--Select a shape--</option>\n                    <option value=\"square\">square</option>\n                    <option value=\"rectangle\">rectangle</option>\n                    <option value=\"circle\">circle</option>\n                    <option value=\"oval\">oval</option>\n                </select>\n            </div>\n            <div className=\"settings color-container\">\n                <label htmlFor=\"color\">Color:</label>\n                <input type=\"color\" id=\"color\" name=\"color\" value={props.color} onChange={handleSetColor}/>\n            </div>\n            {display ? null : <div className=\"settings height-container\">\n                <label htmlFor=\"height\">Height: {props.height}</label>\n                <input type=\"range\" id=\"height\" name=\"height\" min=\"1\" max=\"400\" value={props.height} step=\"1\" onChange={handleSetHeight}/>\n    </div> }\n            <div className='settings width-container'>\n                <label htmlFor=\"width\">Width:</label>\n                <input type=\"range\" id=\"width\" name=\"width\" min=\"1\" max=\"400\" value={props.width} step=\"1\" onChange={handleSetWidth}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ShapeForm","import React from 'react'\nimport '../styles/shapes.css'\n\nconst ShapeDisplay = (props) => {\n    const shapeStyle = {\n        width: `${props.width}px`,\n        height: props.shape === 'square' || props.shape === 'circle' ? `${props.width}px` : `${props.height}px`,\n        background: `${props.color}`, \n        borderRadius: props.shape === 'oval' ? props.width ? `${(props.width/2)}px` : '100px' / props.height ? `${(props.height/2)}px` : '50px' : ''\n    }\n\n    let shapeDisplay = props.shape ? <div className={props.shape} style={shapeStyle}>\n\n                                    </div>\n                                    : \n                                    <div>Begin by selecting your shape!</div>\n    return (\n        <div className='shape-display-container'>\n            {shapeDisplay}\n        </div>\n    )\n}\n\nexport default ShapeDisplay","import React, { useState } from 'react';\nimport './App.css';\n\nimport ShapeForm from './components/ShapeForm'\nimport ShapeDisplay from './components/ShapeDisplay'\n\nfunction App() {\n\n  const [shape, setShape] = useState('')\n  const [width, setWidth] = useState('')\n  const [height, setHeight] = useState('')\n  const [color, setColor] = useState('#ff2600')\n\n\n  return (\n    <div className=\"App\">\n        <ShapeForm \n          shape={shape} \n          setShape={setShape} \n          width={width} \n          setWidth={setWidth} \n          heigth={height} \n          setHeight={setHeight} \n          color={color}\n          setColor={setColor}\n          />\n        <ShapeDisplay \n          shape={shape} \n          width={width} \n          height={height} \n          color={color}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}